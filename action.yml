name: 'Build and Push Container on OCI'
description: 'Build and Push Container on OCI'
inputs:
  aws-region:
    description: 'AWS Region, e.g. us-east-2'
    required: true
  docker-registry:
    description: 'AWS ECR Registry'
    required: true
  dockerfile-path:
    description: 'The Dockerfile path'
    default: '.'
    required: false
  docker-build-extra-args:
    description: 'Extra arguments for docker build'
    default: ''
    required: false
  repository-name:
    description: 'Repository Name '
    default: ''
    required: false
  oci-compartment-ocid:
    description: 'Compartment Name'
    required: true
  # oci-auth-token:
  #   description: 'Token OCI'
  #   required: true
  # oci-cli-user:
  #   description: 'User ID - OCI'
  #   required: true
  # oci-cli-fingerprint:
  #   description: 'Fingerprint ID user - OCI'
  #   required: true
  # oci-cli-key-content:
  #   description: 'content private key - OCI'
  #   required: true
  # oci-cli-tenancy:
  #   description: 'Tenancy ID - OCI'
  #   required: true

secrets:
  oci-compartment-ocid:
    description: 'Compartment ID - OCI'
    required: true
  oci-auth-token:
    description: 'Token ID - OCI'
    required: true
  oci-cli-user:
    description: 'User ID - OCI'
    required: true
  oci-cli-fingerprint:
    description: 'Fingerprint ID user - OCI'
    required: true
  oci-cli-key-content:
    description: 'content private key - OCI'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get or create an OCIR Repository
      uses: oracle-actions/get-ocir-repository@v1.2.1
      id: get-ocir-repository
      with:
        name: facily-tech/${{ inputs.repository-name }}
        compartment: ${{ inputs.oci-compartment-ocid }}
      env:
        OCI_CLI_USER: ${{ secrets.oci-cli-user }}
        OCI_CLI_TENANCY: ${{ inputs.oci-cli-tenancy }}
        OCI_CLI_FINGERPRINT: ${{ secrets.oci-cli-fingerprint }}
        OCI_CLI_KEY_CONTENT: ${{ secrets.oci-cli-key-content }}
        OCI_CLI_REGION: ${{ inputs.aws-region }}

    - name: Log into OCIR
      uses: oracle-actions/login-ocir@v1.2.1
      id: login-ocir
      with:
        auth_token: ${{ secrets.oci-auth-token }}
      env:
        OCI_CLI_USER: ${{ secrets.oci-cli-user }}
        OCI_CLI_TENANCY: ${{ inputs.oci-cli-tenancy }}
        OCI_CLI_FINGERPRINT: ${{ secrets.oci-cli-fingerprint }}
        OCI_CLI_KEY_CONTENT: ${{ secrets.oci-cli-key-content }}
        OCI_CLI_REGION: ${{ inputs.aws-region }}

    - name: build
      env:
        DOCKER_REGISTRY: ${{ inputs.docker-registry }}
        OCI_CLI_USER: ${{ secrets.oci-cli-user }}
        OCI_CLI_TENANCY: ${{ inputs.oci-cli-tenancy }}
        OCI_CLI_FINGERPRINT: ${{ secrets.oci-cli-fingerprint }}
        OCI_CLI_KEY_CONTENT: ${{ secrets.oci-cli-key-content }}
        OCI_CLI_REGION: ${{ inputs.aws-region }}
      shell: bash
      run: |
        if [ -z "${{ inputs.repository-name }}" ]
        then
              export REPOSITORY_NAME=$GITHUB_REPOSITORY
        else
              export REPOSITORY_NAME=facily-tech/${{ inputs.repository-name }}
        fi
        docker pull ${{ steps.get-ocir-repository.outputs.repo_path }}:latest || true
        docker build ${{ inputs.docker-build-extra-args }} --cache-from ${{ steps.get-ocir-repository.outputs.repo_path }}:latest -t ${{ steps.get-ocir-repository.outputs.repo_path }}:$GITHUB_SHA ${{ inputs.dockerfile-path }}
        docker tag "${{ steps.get-ocir-repository.outputs.repo_path }}:$GITHUB_SHA" ${{ steps.get-ocir-repository.outputs.repo_path }}:latest
        docker push "${{ steps.get-ocir-repository.outputs.repo_path }}" -a